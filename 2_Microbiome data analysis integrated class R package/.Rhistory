plot_bar(ps_rela, fill="Phylum")
#--展示部分感兴趣的微生物
gp.ch = subset_taxa(ps_rela, Phylum == "Chlamydiae")
plot_bar(gp.ch, fill="Genus")
plot_bar(gp.ch, x="Group", fill="Genus")
plot_bar(gp.ch, "Group", fill="Genus", facet_grid=~Family)
ggsave("./Fig3_Phylum_abundance_bar.png",p2,width = 6,height = 8)
#--相对丰都标准化后展示全部OTU-使用门水平着色。
p2 <- plot_bar(ps_rela, fill="Phylum")
ggsave("./Fig3_Phylum_abundance_bar.png",p2,width = 6,height = 8)
ggsave("./Fig3_Phylum_abundance_bar.png",p2,width = 6,height = 8)
library(ggplot2)
library(phyloseq)
library(ggClusterNet)# github：taowenmicro/ggCLusterNet
data(ps)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MicrobiotaProcess")
BiocManager::install("MicrobiotaProcess",force = TRUE)
library(MicrobiotaProcess)
data(mouse.time.mpse)
assays(mouse.time.mpse)
data(mouse.time.mpse)
mouse.time.mpse
library(SummarizedExperiment)
assays(mouse.time.mpse)
library(ggplot2)
library(DT)
library(tidyverse)
library(phyloseq)
library(ggtree)
library(treeio)
library(tidytree)
library(MicrobiotaProcess)
library(MicrobiotaProcess)
# import data from dada2 pipeline.
seqtabfile <- system.file("extdata", "seqtab.nochim.rds", package="MicrobiotaProcess")
seqtab <- readRDS(seqtabfile)
seqtab
taxafile <- system.file("extdata", "taxa_tab.rds",package="MicrobiotaProcess")
seqtab <- readRDS(seqtabfile)
taxa <- readRDS(taxafile)
# the seqtab and taxa are output of dada2
sampleda <- system.file("extdata", "mouse.time.dada2.txt", package="MicrobiotaProcess")
ps_dada2 <- import_dada2(seqtab=seqtab, taxatab=taxa, sampleda=sampleda)
ps_dada2
# import data from qiime2 pipeline
otuqzafile <- system.file("extdata", "table.qza", package="MicrobiotaProcess")
taxaqzafile <- system.file("extdata", "taxa.qza", package="MicrobiotaProcess")
mapfile <- system.file("extdata", "metadata_qza.txt", package="MicrobiotaProcess")
ps_qiime2 <- import_qiime2(otuqza=otuqzafile, taxaqza=taxaqzafile, mapfilename=mapfile)
ps_qiime2
set.seed(1024)
p_rare <- ggrarecurve(obj=ps_dada2,
indexNames=c("Observe","Chao1","ACE"),
chunks=300) +
theme(legend.spacing.y=unit(0.02,"cm"),
legend.text=element_text(size=6))
p_rare
alphaobj <- get_alphaindex(ps_dada2)
head(as.data.frame(alphaobj))
p_alpha <- ggbox(alphaobj, geom="violin", factorNames="time") +
scale_fill_manual(values=c("#2874C5", "#EABF00"))+
theme(strip.background = element_rect(colour=NA, fill="grey"))
p_alpha
pcoares <- get_pcoa(obj=ps_dada2, distmethod="euclidean", method="hellinger")
# Visualizing the result
pcoaplot <- ggordpoint(obj=pcoares, biplot=TRUE, speciesannot=TRUE,
factorNames=c("time"), ellipse=TRUE) +
scale_colour_manual(values=c("#2874C5", "#EABF00")) +
scale_fill_manual(values=c("#2874C5", "#EABF00"))
pcoaplot
pcares <- get_pca(obj=ps_dada2, method="hellinger")
# Visulizing the result
pcaplot <- ggordpoint(obj=pcares, biplot=TRUE, speciesannot=TRUE,
factorNames=c("time"), ellipse=TRUE) +
scale_colour_manual(values=c("#2874C5", "#EABF00")) +
scale_fill_manual(values=c("#2874C5", "#EABF00"))
pcaplot
pcoares <- get_pcoa(obj=ps_dada2, distmethod="euclidean", method="hellinger")
# Visualizing the result
pcoaplot <- ggordpoint(obj=pcoares, biplot=TRUE, speciesannot=TRUE,
factorNames=c("time"), ellipse=TRUE) +
scale_colour_manual(values=c("#2874C5", "#EABF00")) +
scale_fill_manual(values=c("#2874C5", "#EABF00"))
pcoaplot
hcsample <- get_clust(obj=ps_dada2, distmethod="euclidean",
method="hellinger", hclustmethod="average")
# rectangular layout
clustplot1 <- ggclust(obj=hcsample,
layout = "rectangular",
pointsize=1,
fontsize=0,
factorNames=c("time")) +
scale_color_manual(values=c("#2874C5", "#EABF00")) +
theme_tree2(legend.position="right",
plot.title = element_text(face="bold", lineheight=25,hjust=0.5))
clustplot1
# circular layout
clustplot2 <- ggclust(obj=hcsample,
layout = "circular",
pointsize=1,
fontsize=2,
factorNames=c("time")) +
scale_color_manual(values=c("#2874C5", "#EABF00")) +
theme(legend.position="right")
clustplot2
data(kostic2012crc)
kostic2012crc
#datatable(sample_data(kostic2012crc), options=list(scrollX=TRUE, scrollY="400px", scrollCollapse=TRUE))
kostic2012crc <- phyloseq::rarefy_even_depth(kostic2012crc,rngseed=1024)
table(sample_data(kostic2012crc)$DIAGNOSIS)
set.seed(1024)
diffres <- diff_analysis(obj=kostic2012crc, classgroup="DIAGNOSIS",
mlfun="lda",
filtermod="fdr",
firstcomfun = "kruskal.test",
firstalpha=0.05,
strictmod=TRUE,
secondcomfun = "wilcox.test",
subclmin=3,
subclwilc=TRUE,
secondalpha=0.01,
lda=3)
diffres
diffcladeplot <- ggdiffclade(obj=diffres,
alpha=0.3, size=0.2,
skpointsize=0.6,
taxlevel=3,
settheme=FALSE,
setColors=FALSE) +
scale_fill_manual(values=c("#00AED7", "#FD9347"))+
guides(color = guide_legend(keywidth = 0.1,
keyheight = 0.6,
order = 3,
ncol=1)) +
theme(panel.background=element_rect(fill=NA),
legend.position="right",
plot.margin=margin(0,0,0,0),
legend.spacing.y = unit(0.02, "cm"),
legend.title=element_text(size=7),
legend.text=element_text(size=6),
legend.box.spacing=unit(0.02,"cm"))
diffcladeplot
diffres
kostic2012crc
library(MicrobiotaProcess)
library(SummarizedExperiment)
data(mouse.time.mpse)
assays(mouse.time.mpse)
## List of length 1
## names(1): Abundance
mouse.time.mpse %<>% mp_rrarefy()
assays(mouse.time.mpse)
mouse.time.mpse
## List of length 2
## names(2): Abundance RareAbundance
# the alpha index will add into colData when action = 'add'
mouse.time.mpse %<>% mp_cal_alpha(.abundance = RareAbundance, action = "
add")
print(mouse.time.mpse, n=4)
library(MicrobiotaProcess)
library(SummarizedExperiment)
data(mouse.time.mpse)
assays(mouse.time.mpse)
## List of length 1
## names(1): Abundance
mouse.time.mpse %<>% mp_rrarefy()
assays(mouse.time.mpse)
## List of length 2
## names(2): Abundance RareAbundance
# the alpha index will add into colData when action = 'add'
mouse.time.mpse %<>% mp_cal_alpha(.abundance = RareAbundance, action = "
add")
## List of length 2
## names(2): Abundance RareAbundance
# the alpha index will add into colData when action = 'add'
mouse.time.mpse %<>%
mp_cal_alpha(.abundance = RareAbundance, action = "add")
print(mouse.time.mpse, n=4)
knitr::opts_chunk$set(
collapse = T, echo=T, comment="#>", message=F, warning=F,
fig.align="center", fig.width=5, fig.height=3, dpi=150)
set.seed(1024)
knitr::opts_chunk$set(
collapse = T, echo=T, comment="#>", message=F, warning=F,
fig.align="center", fig.width=5, fig.height=3, dpi=150)
p_rare <- ggrarecurve(obj=ps_dada2,
indexNames=c("Observe","Chao1","ACE"),
chunks=300) +
theme(legend.spacing.y=unit(0.02,"cm"),
legend.text=element_text(size=6))
p_rare
knitr::opts_chunk$set(
collapse = T, echo=T, comment="#>", message=F, warning=F,
fig.align="center", fig.width=5, fig.height=3, dpi=150)
install.packages('remotes')
install.packages('remotes')
remotes::install_github("https://github.com/xielab2017/EasyMicroPlot",subdir='Version_0.5')
knitr::opts_chunk$set(
collapse = T, echo=T, comment="#>", message=F, warning=F,
fig.align="center", fig.width=5, fig.height=3, dpi=150)
remotes::install_github("https://github.com/xielab2017/EasyMicroPlot",subdir='Version_0.5')
BiocManager::install("filesstrings")
BiocManager::install("filesstrings")
BiocManager::install("strex")
BiocManager::install("filesstrings")
BiocManager::install("strex")
BiocManager::install("filesstrings")
install.packages("C:/Users/wentao/Desktop/strex/")
install.packages("C:/Users/wentao/Desktop/strex//", repos = NULL, type = "source")
# install.packages("C:/Users/wentao/Desktop/strex/")
install.packages("C:/Users/wentao/Desktop/strex//", repos = NULL, type = "source")
BiocManager::install("stringi")
library(stringi)
# install.packages("C:/Users/wentao/Desktop/strex/")
install.packages("C:/Users/wentao/Desktop/stringi//", repos = NULL, type = "source")
BiocManager::install("stringi")
library(stringi)
# install.packages('remotes')
remotes::install_github("https://github.com/xielab2017/EasyMicroPlot")
# install.packages('remotes')
remotes::install_github("https://github.com/xielab2017/EasyMicroPlot",subdir='Version_0.5')
BiocManager::install("filesstrings")
library(microeco)
library(microeco)
data(dataset)
data(env_data_16S)
t1 <- trans_nullmodel$new(dataset, filter_thres = 0.0005, add_data = env_data_16S)
trans_nullmodel$cal_mantel_corr
## ------------------------------------------------
## Method `trans_nullmodel$cal_mantel_corr`
## ------------------------------------------------
t1$cal_mantel_corr(use_env = "pH")
## ------------------------------------------------
## Method `trans_nullmodel$plot_mantel_corr`
## ------------------------------------------------
t1$plot_mantel_corr()
## ------------------------------------------------
## Method `trans_nullmodel$cal_betampd`
## ------------------------------------------------
t1$cal_betampd(abundance.weighted = TRUE)
trans_nullmodel 95
t1$cal_betamntd()
library(ggplot2)
library(phyloseq)
library(ggClusterNet)# github：taowenmicro/ggCLusterNet
data(ps)
# 查看进化树文件
phy_tree(ps)
#-基于样本-----去除序列量比较少的样本
ps <- prune_samples(sample_sums(ps) >=2000,ps);ps
#--基于样本----去除低丰度OTU，这里去除全部read为0的OTU
ps = filter_taxa(ps, function(x) sum(x ) > 0 , TRUE)
p0 <- plot_richness(ps, x="Group", color="Group", measures=c("Chao1", "Observed"))
p0$layers[[2]] = NULL # 去除误差线
# 添加箱型图
p0 <- p0  + geom_boxplot() + theme_bw()
p0
# 添加箱型图
p0 <- p0  + geom_boxplot() + theme_bw()
p0
ggsave("./Fig1_alpha.pdf",p0,width = 6,height = 4)
ggsave("./Fig1_alpha.png",p0,width = 6,height = 4)
getwd()
ggsave("./pipeline/01.phyloseq/Fig1_alpha.pdf",p0,width = 6,height = 4)
path = "./pipeline/01.phyloseq/"
ggsave("./pipeline/01.phyloseq/Fig1_alpha.png",p0,width = 6,height = 4)
ps_rela = transform_sample_counts(ps, function(x) 1E6 * x/sum(x))
ord <- ordinate(ps_rela, "NMDS", "bray")
ord
p1 = plot_ordination(ps, ord, type="samples", color="Group", title="Ordination") + theme_bw()
p1
ggsave("./pipeline/01.phyloseq/Fig2_ordination.pdf",p1,width = 4,height = 4)
ggsave("./pipeline/01.phyloseq/Fig2_ordination.pdf",p1,width = 5,height = 4)
ggsave("./pipeline/01.phyloseq/Fig2_ordination.png",p1,width = 4.5,height = 4)
ggsave("./pipeline/01.phyloseq/Fig2_ordination.pdf",p1,width = 4.5,height = 4)
ps_rela = transform_sample_counts(ps, function(x) x/sum(x))
#--相对丰都标准化后展示全部OTU-使用门水平着色。
p2 <- plot_bar(ps_rela, fill="Phylum") + theme_bw()
p2
#--相对丰都标准化后展示全部OTU-使用门水平着色。
p2 <- plot_bar(ps_rela, fill="Phylum") + theme_bw()
#--展示部分感兴趣的微生物
gp.ch = subset_taxa(ps_rela, Phylum == "Chlamydiae")
plot_bar(gp.ch, fill="Genus") + theme_bw()
plot_bar(gp.ch, x="Group", fill="Genus")+ theme_bw()
plot_bar(gp.ch, "Group", fill="Genus", facet_grid=~Family)
ps
library(ggClusterNet)
ps_rela = transform_sample_counts(ps, function(x) x/sum(x)) %>% filter_OTU_ps(50)
library(tidyverse)
ps_rela = transform_sample_counts(ps, function(x) x/sum(x)) %>% filter_OTU_ps(50)
#--相对丰都标准化后展示全部OTU-使用门水平着色。
p2 <- plot_bar(ps_rela, fill="Phylum") + theme_bw()
p2
library(tidyverse)
ps_rela = transform_sample_counts(ps, function(x) x/sum(x))
#--相对丰都标准化后展示全部OTU-使用门水平着色。
p2 <- plot_bar(ps_rela, fill="Phylum") + theme_bw()
ggsave("./pipeline/01.phyloseq/Fig3_Phylum_abundance_bar.png",p2,width = 8,height = 5)
ggsave("./pipeline/01.phyloseq/Fig3_Phylum_abundance_bar.pdf",p2,width = 8,height = 5)
plot_bar(ps_rela, fill="Phylum") + theme_bw()+
scale_color_brewer()
plot_bar(ps_rela, fill="Phylum") + theme_bw()+
scale_color_binned()
plot_bar
#--展示部分感兴趣的微生物
gp.ch = subset_taxa(ps_rela, Phylum == "Chlamydiae")
plot_bar(gp.ch, fill="Genus") + theme_bw()
plot_bar(gp.ch, x="Group", fill="Genus")+ theme_bw()
plot_bar(gp.ch, "Group", fill="Genus", facet_grid=~Family)
ps_rela = transform_sample_counts(ps, function(x) x/sum(x))
gpt <- subset_taxa(ps_rela, Kingdom=="Bacteria")
gpt <- prune_taxa(names(sort(taxa_sums(ps),TRUE)[1:30]), gpt)
#默认从OTU水平展示丰度热图
plot_heatmap(gpt, sample.label="Group")
#默认从OTU水平展示丰度热图
p = plot_heatmap(gpt, sample.label="Group")
#--该函数可以使用排序方法对行和列进行排序分析，并且按照结构进行顺序安排。
p3 <- plot_heatmap(gpt, "NMDS", "bray", "Group", "Family") +
scale_fill_gradientn(colours =colorRampPalette(RColorBrewer::brewer.pal(4,"Set3"))(60))
p3
ggsave("./pipeline/01.phyloseq/Fig4_Family_high_abundance_heatmap.png",p3,width = 6,height = 6)
ggsave("./pipeline/01.phyloseq/Fig4_Family_high_abundance_heatmap.pdf",p3,width = 6,height = 6)
p
# ?plot_tree
p4 <- plot_tree(gpt,  color="Group", label.tips="taxa_names", ladderize="left",size="abundance", base.spacing=0.1) +
scale_size_continuous()
p4
plot_tree(gpt,  color="Group", label.tips="taxa_names", ladderize="left",size="abundance", base.spacing=0.08) + coord_polar(theta="y") +
scale_size_continuous()
ggsave("./pipeline/01.phyloseq/Fig5_phytree_high_abundance_point.pdf",p4,width = 8,height = 8)
ggsave("./pipeline/01.phyloseq/Fig5_phytree_high_abundance_point.png",p4,width = 8,height = 8)
plot_tree(gpt,  color="Group", label.tips="taxa_names", ladderize="left",size="abundance", base.spacing=0.2) + coord_polar(theta="y") +
scale_size_continuous()
plot_tree(gpt,  color="Group", label.tips="", ladderize="left",size="abundance", base.spacing=0.08) + coord_polar(theta="y") +
scale_size_continuous()
plot_tree(gpt,  color="Group", label.tips="", ladderize="left",size="abundance", base.spacing=0.3) + coord_polar(theta="y") +
scale_size_continuous()
myTaxa = names(sort(taxa_sums(ps), decreasing = TRUE)[1:50])
ps1 = prune_taxa(myTaxa, ps)
ps1
p5 <- plot_net(ps1,type = "taxa",maxdist = 0.6,color = "Phylum",
laymeth = "circle"
)
p5
plot_net(laymeth='list')
ggsave("./pipeline/01.phyloseq/Fig6_Micro_network.pdf",p5,width = 7,height = 5.5)
ggsave("./pipeline/01.phyloseq/Fig6_Micro_network.png",p5,width = 7,height = 5.5)
library(DESeq2)
diagdds = phyloseq_to_deseq2(ps, ~ Group)
## converting counts to integer mode
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")
res = results(diagdds, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(ps)[rownames(sigtab), ], "matrix"))
head(sigtab)
theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
scale_fill_brewer(palette = palname, ...)
}
# Phylum order
x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x))
x = sort(x, TRUE)
sigtab$Phylum = factor(as.character(sigtab$Phylum), levels=names(x))
# Genus order
x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))
ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=Phylum)) + geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
p = ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=Phylum)) + geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggsave("./pipeline/01.phyloseq/Fig7_Desep2.pdf",p5,width = 7,height = 5.5)
ggsave("./pipeline/01.phyloseq/Fig7_Desep2.png",p5,width = 7,height = 5.5)
p = ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=Phylum)) + geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggsave("./pipeline/01.phyloseq/Fig7_Desep2.pdf",p,width = 7,height = 5)
ggsave("./pipeline/01.phyloseq/Fig7_Desep2.png",p,width = 7,height = 5)
# Convert to compositional data
pseq <- microbiome::transform(ps, "compositional")
# Pick core taxa
pseq.core <- core(pseq, detection = 1/1000, prevalence = 5/100)
p <- plot_landscape(pseq,
method = "NMDS", distance = "bray", col = "Group") +
labs(title = paste("NMDS / Compositional / Bray-Curtis"))
path = "./pipeline/01.phyloseq/"
p0 <- plot_richness(ps, x="Group", color="Group", measures=c("Chao1", "Observed"))
p0$layers[[2]] = NULL # 去除误差线
# 添加箱型图
p0 <- p0  + geom_boxplot() + theme_bw()
p0
ggsave("./pipeline/01.phyloseq/Fig1_alpha.pdf",p0,width = 5,height = 4)
ggsave("./pipeline/01.phyloseq/Fig1_alpha.png",p0,width = 5,height = 4)
ps_rela = transform_sample_counts(ps, function(x) 1E6 * x/sum(x))
ord <- ordinate(ps_rela, "NMDS", "bray")
ord
p1 = plot_ordination(ps, ord, type="samples", color="Group", title="Ordination") + theme_bw()
p1
ggsave("./pipeline/01.phyloseq/Fig2_ordination.png",p1,width = 4.5,height = 4)
ggsave("./pipeline/01.phyloseq/Fig2_ordination.pdf",p1,width = 4.5,height = 4)
#--展示部分感兴趣的微生物
gp.ch = subset_taxa(ps_rela, Phylum == "Chlamydiae")
plot_bar(gp.ch, fill="Genus") + theme_bw()
plot_bar(gp.ch, x="Group", fill="Genus")+ theme_bw()
plot_bar(gp.ch, x="Group", fill="Class")+ theme_bw()
plot_bar(gp.ch, x="Group", fill="Order")+ theme_bw()
plot_bar(gp.ch, x="Group", fill="Genus")+ theme_bw()
ggsave("./pipeline/01.phyloseq/Fig3_Chlamydiae_abundance_bar.png",p2,width = 8,height = 5)
ggsave("./pipeline/01.phyloseq/Fig3_Chlamydiae_abundance_bar.pdf",p2,width = 8,height = 5)
ggsave("./pipeline/01.phyloseq/Fig3_Chlamydiae_abundance_bar.png",p,width = 8,height = 5)
ggsave("./pipeline/01.phyloseq/Fig3_Chlamydiae_abundance_bar.pdf",p,width = 8,height = 5)
p = plot_bar(gp.ch, x="Group", fill="Genus")+ theme_bw()
p
p
ggsave("./pipeline/01.phyloseq/Fig3_Chlamydiae_abundance_bar.png",p,width =4,height = 5)
ggsave("./pipeline/01.phyloseq/Fig3_Chlamydiae_abundance_bar.pdf",p,width = 4,height = 5)
library(ggplot2)
library(gtable)
library(grid)
dat <- data.frame(x=rep(1:10,2),y=1:20+rnorm(20),z=c(rep("A",10),rep("B",10)))
p <- ggplot(dat,aes(x,y)) + geom_point() + facet_grid(z~.) + xlim(0,10)
p
#---不同facet点的连线#-------
library(ggplot2)
df <- data.frame(y=c(1,2,3),x=1,Set=LETTERS[1:3])
df
p <- ggplot(df,aes(x,y)) +
theme_bw() + theme(legend.position=c(.01,.99),legend.justification=c(0,1)) +
geom_point(aes(fill=Set),color="black",shape=21,size=3) +
facet_grid(~Set) +
xlim(1,5)
p
gb <- ggplot_build(p)
g <- ggplot_gtable(gb)
gb$plot
#提取作图数据
gb <- ggplot_build(p)
gb$data
g <- ggplot_gtable(gb)
g
g <- ggplot_gtable(gb)
gb$plot
library(gtable)
library(grid)
gb$layout$panel_params
# ggplot2 doesn't use native units in data space
# instead, the data is rescaled to npc, i.e from 0 to 1
# so we need to use the build info to convert from data to [0,1]
ranges <- gb$layout$panel_params
data2npc <- function(x, range) scales::rescale(c(range, x), c(0,1))[-c(1,2)]
start <- c(data2npc(1, ranges[[1]][["x.range"]]),
data2npc(1, ranges[[1]][["y.range"]]))
ranges[[1]]
ranges[[1]][["x.range"]]
start <- c(data2npc(1, ranges[[1]][["x.range"]]),
data2npc(1, ranges[[1]][["y.range"]]))
ranges[[3]]
end <- c(data2npc(1, ranges[[3]][["x.range"]]),
data2npc(2, ranges[[3]][["y.range"]]))
moveToGrob
# starting position in the first panel
g <- gtable_add_grob(g, moveToGrob(start[1],start[2]),
t = 8, l = 5)
lineToGrob
# draw line to end position in last panel
g <- gtable_add_grob(g, lineToGrob(end[1],end[2]),
t = 8, l = 9, z=Inf)
end
# turn clip off to see the line across panels
g$layout$clip <- "off"
grid.newpage()
grid.draw(g)
end <- c(data2npc(1, ranges[[3]][["x.range"]]),
data2npc(3, ranges[[3]][["y.range"]]))
# starting position in the first panel
g <- gtable_add_grob(g, moveToGrob(start[1],start[2]),
t = 8, l = 5)
# draw line to end position in last panel
g <- gtable_add_grob(g, lineToGrob(end[1],end[2]),
t = 8, l = 9, z=Inf)
# turn clip off to see the line across panels
g$layout$clip <- "off"
grid.newpage()
grid.draw(g)
# ggplot2 doesn't use native units in data space
# instead, the data is rescaled to npc, i.e from 0 to 1
# so we need to use the build info to convert from data to [0,1]
ranges <- gb$layout$panel_params
data2npc <- function(x, range) scales::rescale(c(range, x), c(0,1))[-c(1,2)]
start <- c(data2npc(1, ranges[[1]][["x.range"]]),
data2npc(1, ranges[[1]][["y.range"]]))
end <- c(data2npc(1, ranges[[3]][["x.range"]]),
data2npc(3, ranges[[3]][["y.range"]]))
# starting position in the first panel
g <- gtable_add_grob(g, moveToGrob(start[1],start[2]),
t = 8, l = 5)
# draw line to end position in last panel
g <- gtable_add_grob(g, lineToGrob(end[1],end[2]),
t = 8, l = 9, z=Inf)
# turn clip off to see the line across panels
g$layout$clip <- "off"
grid.newpage()
grid.draw(g)
