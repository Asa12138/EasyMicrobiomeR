
### 5.3 等量抽样标准化 normlize by subsample

#使用vegan包进行等量重抽样，输入reads count格式Feature表result/otutab.txt
#可指定输入文件、抽样量和随机数，输出抽平表result/otutab_rare.txt和多样性alpha/vegan.txt
mkdir -p result/alpha
Rscript ${bin}/script/otutab_rare.R -h
Rscript ${bin}/script/otutab_rare.R --input result/otutab.txt \
--depth 30000 --seed 1 \
--normalize result/otutab_rare.txt \
--output result/alpha/vegan.txt


## 6. Alpha多样性 Alpha diversity

### 6.1. 计算多样性指数 Calculate alpha diversity index
#Calculate all alpha diversity index,
#details in http://www.drive5.com/usearch/manual/alpha_metrics.html
usearch -alpha_div result/otutab_rare.txt \
-output result/alpha/alpha.txt

### 6.2. 计算稀释过程的丰富度变化 Rarefaction
#稀释曲线：取1%-100%的序列中OTUs数量 Rarefaction from 1%, 2% .. 100% in richness (observed OTUs)-method fast / with_replacement / without_replacement https://drive5.com/usearch/manual/cmd_otutab_subsample.html
time usearch -alpha_div_rare result/otutab_rare.txt \
-output result/alpha/alpha_rare.txt -method without_replacement

### 6.3. 筛选各组高丰度菌用于比较

#按组求均值，需根据实验设计metadata.txt修改组列名
#输入文件为feautre表result/otutab.txt，实验设计metadata.txt
#输出为特征表按组的均值-一个实验可能有多种分组方式
Rscript ${bin}/script/otu_mean.R --input result/otutab.txt \
--design result/metadata.txt \
--group Group \
--output result/otutab_mean.txt

head result/otutab_mean.txt

#如以平均丰度频率高于千分之一(0.1%)为筛选标准，得到每个组的OTU组合
awk 'BEGIN{OFS=FS="\t"}{if(FNR==1) {for(i=2;i<=NF;i++) a[i]=$i;} \
        else {for(i=2;i<=NF;i++) if($i>0.1) print $1, a[i];}}' \
result/otutab_mean.txt > result/alpha/otu_group_exist.txt
head result/alpha/otu_group_exist.txt
# 结果可以直接在http://www.ehbio.com/ImageGP绘制Venn、upSetView和Sanky


## 7. Beta多样性 Beta diversity

#结果有多个文件，需要目录
mkdir -p result/beta/
  #基于OTU构建进化树 Make OTU tree
  time usearch -cluster_agg result/otus.fa -treeout result/otus.tree # 8s
#生成5种距离矩阵：bray_curtis, euclidean, jaccard, manhatten, unifrac
time usearch -beta_div result/otutab_rare.txt -tree result/otus.tree \
-filename_prefix result/beta/ # 1s
  
  
  ## 8. 物种注释结果分类汇总 Taxonomy summary
  
  #统计门纲目科属，使用 rank参数 p c o f g，为phylum, class, order, family, genus缩写
  mkdir -p result/tax
for i in p c o f g;do
time usearch -sintax_summary result/otus.sintax \
-otutabin result/otutab_rare.txt \
-rank ${i} \
-output result/tax/sum_${i}.txt
done
#Taxonomy中异常字符
sed -i 's/(//g;s/)//g;s/\"//g;s/\#//g;s/\/Chloroplast//g' result/tax/sum_*.txt

# 列出所有文件
ls result/tax/sum_*.txt

# 查看文件内容
head result/tax/sum_g.txt

#OTU对应物种注释2列格式：去除sintax中置信值，只保留物种注释，替换:为_，删除引号
cut -f 1,4 result/otus.sintax \
|sed 's/\td/\tk/;s/:/__/g;s/,/;/g;s/"//g;s/\/Chloroplast//' \
> result/taxonomy2.txt
head -n3 result/taxonomy2.txt

#OTU对应物种8列格式：
#注意注释是非整齐的，由于新物种只是相近而不同
#生成物种表格：注意OTU/ASV中会有末知为空白，补齐分类未知新物种为Unassigned
awk 'BEGIN{OFS=FS="\t"}{delete a; a["k"]="Unassigned";a["p"]="Unassigned";a["c"]="Unassigned";a["o"]="Unassigned";a["f"]="Unassigned";a["g"]="Unassigned";a["s"]="Unassigned";\
      split($2,x,";");for(i in x){split(x[i],b,"__");a[b[1]]=b[2];} \
      print $1,a["k"],a["p"],a["c"],a["o"],a["f"],a["g"],a["s"];}' \
result/taxonomy2.txt > temp/otus.tax
# mac自带的sed不识别tab \t
sed 's/;/\t/g;s/.__//g;' temp/otus.tax|cut -f 1-8 | \
sed '1 s/^/OTUID\tKingdom\tPhylum\tClass\tOrder\tFamily\tGenus\tSpecies\n/' \
> result/taxonomy.txt
head -n3 result/taxonomy.txt


## 9. 有参比对——功能预测，如Greengenes，可用于picurst, bugbase分析

mkdir -p result/gg/
  #与GG所有97% OTUs比对，用于功能预测
  
  #方法1. usearch比对更快，但文件超限报错选方法2
  usearch -otutab temp/filtered.fa -otus ${db}/gg/97_otus.fasta \
-otutabout result/gg/otutab.txt -threads 4

head -n3 result/gg/otutab.txt
#79.9%, 4核时6m

# #方法2. vsearch比对，更准但更慢，但并行更强
# time vsearch --usearch_global temp/filtered.fa --db ${db}/gg/97_otus.fasta \
#   --otutabout result/gg/otutab.txt --id 0.97 --threads 4
# #80.87%, 49m, 594Mb

#统计
usearch -otutab_stats result/gg/otutab.txt -output result/gg/otutab.stat
cat result/gg/otutab.stat


## 10. 空间清理及数据提交

#删除中间大文件
rm -rf temp/*.fq
#原始数据及时压缩节省空间并上传数据中心备份, 54s
gzip seq/*
  
  # 分双端统计md5值，用于数据提交
  cd seq
md5sum *_1.fq.gz > md5sum1.txt
md5sum *_2.fq.gz > md5sum2.txt
paste md5sum1.txt md5sum2.txt | awk '{print $2"\t"$1"\t"$4"\t"$3}' | sed 's/*//g' > ../result/md5sum.txt
rm md5sum*
  cd ..
cat result/md5sum.txt



# 23、LEfSe、STAMP统计分析和可视化

## 1. LEfSe windows + 网页分析

#1. 23LEfSe目录中准备otutab.txt, metadata.txt, taxonomy.txt三个文件；
#2. Rstudio打开format2lefse.Rmd并Knit生成输入文件和可重复计算网页；
# 可选命令行生成输入文件
Rscript ${bin}/script/format2lefse.R -h
Rscript ${bin}/script/format2lefse.R --input result/otutab.txt \
--taxonomy result/taxonomy.txt --design result/metadata.txt \
--group Group --threshold 0.1 \
--output result/LEfSe.txt
# MAC下可能会出现这个错误
# Error in `$<-.data.frame`(`*tmp*`, "Phylum", value = character(0)) :
# replacement has 0 rows, data has 163
# Calls: format2lefse -> $<- -> $<-.data.frame
# 停止执行
# 这是文件result/taxonomy.txt格式不对导致的
# MAC的sed不支持\t，建议安装gnu-sed，或打开文件自己修改
#3. 打开LEfSe.txt并在线提交 http://www.ehbio.com/ImageGP/index.php/Home/Index/LEFSe.html

## 2. STAMP文件生成

#1. 23STAMP目录中准备otutab.txt和taxonomy.txt文件；
#2. Rstudio打开format2stamp.Rmd并Knit生成输入文件和可重复计算网页；
# 可选命令行生成输入文件
Rscript ${bin}/script/format2stamp.R -h
mkdir -p result/stamp
Rscript ${bin}/script/format2stamp.R --input result/otutab.txt \
--taxonomy result/taxonomy.txt --threshold 0.1 \
--output result/stamp/tax
#3. 打开LEfSe.txt并在线提交 http://www.ehbio.com/ImageGP/index.php/Home/Index/LEFSe.html

## 3. LEfSe Linux服务器下分析(选学)

#注：Windows下无法运行
mkdir -p ~/amplicon/23LEfSe
cd ~/amplicon/23LEfSe
#上传 LEfSe.txt 文件

#格式转换为lefse内部格式
lefse-format_input.py LEfSe.txt input.in -c 1 -o 1000000
#运行lefse
run_lefse.py input.in input.res
#绘制物种树注释差异
lefse-plot_cladogram.py input.res cladogram.pdf --format pdf
#绘制所有差异features柱状图
lefse-plot_res.py input.res res.pdf --format pdf
#绘制单个features柱状图(同STAMP中barplot)
head input.res #查看差异features列表
lefse-plot_features.py -f one --feature_name "Bacteria.Firmicutes.Bacilli.Bacillales.Planococcaceae.Paenisporosarcina" \
--format pdf input.in input.res Bacilli.pdf
#批量绘制所有差异features柱状图，慎用(几百张差异结果柱状图阅读也很困难)
mkdir -p features
lefse-plot_features.py -f diff --archive none --format pdf \
input.in input.res features/
  
  
  # 24 R语言差异分析
  
  # 准备门水平曼哈顿图例，n10代表前10门作为图例
  tail -n+2 result/tax/sum_p.txt | grep -v 'Unassigned' \
| cut -f 1 | head -n10 > result/tax/tax_phylum.top
# 差异比较，指定列名和两组名，用短线连接两组，如A-B
Rscript ${bin}/script/compare.R \
--input result/otutab.txt --design result/metadata.txt \
--taxonomy result/taxonomy.txt --topNtax result/tax/tax_phylum.top \
--group Group --compare KO-WT --output result/compare/ \
--pvalue 0.05 --fdr 0.1 --width 8 --height 5

# 24 R语言多样性分析

## 1. Alpha多样性箱线图
# 查看帮助
Rscript ${bin}/script/alpha_boxplot.R -h
# 完整参数
Rscript ${bin}/script/alpha_boxplot.R --alpha_index richness \
--input result/alpha/alpha.txt --design result/metadata.txt \
--group Group --output result/alpha/ \
--width 89 --height 59



# 31. PICRUSt功能预测 (Linux下分析、选学)

#推荐使用 http://www.ehbio.com/ImageGP 在线分析
#有Linux服务器用户可参考以下代码搭建本地流程
cd ~/amplicon/31PICRUSt

#上传gg/otutab.txt至当前目录
#转换为OTU表通用格式，方便下游分析和统计
biom convert -i otutab.txt \
-o otutab.biom \
--table-type="OTU table" --to-json
#校正拷贝数
normalize_by_copy_number.py -i otutab.biom \
-o otutab_norm.biom \
-c /db/picrust/16S_13_5_precalculated.tab.gz
#预测宏基因组KO表，biom方便下游归类，txt方便查看分析
predict_metagenomes.py -i otutab_norm.biom \
-o ko.biom \
-c /db/picrust/ko_13_5_precalculated.tab.gz
predict_metagenomes.py -f -i otutab_rare.biom \
-o ko.txt \
-c /db/picrust/ko_13_5_precalculated.tab.gz

#按功能级别分类汇总, -c输出KEGG_Pathways，分1-3级
sed  -i '/#Constru/d;s/#OTU //' ko.txt
num=`tail -n1 ko.txt|wc -w`
for i in 1 2 3;do
categorize_by_function.py -f -i ko.biom -c KEGG_Pathways -l ${i} -o ko${i}.txt
sed  -i '/#Constru/d;s/#OTU //' ko${i}.txt
paste <(cut -f $num ko${i}.txt) <(cut -f 1-$[num-1] ko${i}.txt) > ko${i}.spf
done
wc -l ko*.spf


# 32. Bugbase细菌表型预测


## 1. Bugbase在Windows下分析
bugbase=${bin}/script/BugBase
rm -rf result/bugbase/
  Rscript ${bugbase}/bin/run.bugbase.r -L ${bugbase} \
-i result/gg/otutab.txt -m result/metadata.txt -c Group -o result/bugbase/
  
  ## 2. 使用 http://www.ehbio.com/ImageGP 在线分析
  
  ## 3. Linux下安装和命令行
  
  ### 1. 软件安装(仅一次)
  
  #有两种方法可选，推荐第一种，可选第二种，仅需运行一次
  
  #方法1. git下载，需要有git
  git clone https://github.com/knights-lab/BugBase

#方法2. 下载并解压
wget https://github.com/knights-lab/BugBase/archive/master.zip
mv master.zip BugBase.zip
unzip BugBase.zip
mv BugBase-master/ BugBase

#安装依赖包
cd BugBase
export BUGBASE_PATH=`pwd`
export PATH=$PATH:`pwd`/bin
#安装了所有依赖包
run.bugbase.r -h
#测试数据
run.bugbase.r -i doc/data/HMP_s15.txt -m doc/data/HMP_map.txt -c HMPBODYSUBSITE -o output


### 2. 准备输入文件

cd ~/amplicon/32BugBase
#输入文件：基于greengene OTU表的biom格式(本地分析支持txt格式无需转换)和mapping file(metadata.txt首行添加#)
#上传实验设计+刚才生成的otutab_gg.txt
#生成在线分析使用的biom1.0格式
biom convert -i ../result/gg/otutab.txt -o otutab_gg.biom --table-type="OTU table" --to-json
sed '1 s/^/#/' ../result/metadata.txt > MappingFile.txt
#下载otutab_gg.biom 和 MappingFile.txt用于在线分析

### 3. 本地分析

export BUGBASE_PATH=`pwd`
export PATH=$PATH:`pwd`/bin
run.bugbase.r -i otutab_gg.txt -m MappingFile.txt -c Group -o phenotype/
  
  
  # 32. FAPROTAXS元素循环和Bugbase表型预测
  
  ## 方法1. 在线分析
  
  #推荐使用 http://www.ehbio.com/ImageGP 在线分析
  
  ## 方法2. Linux下分析、选学
  
  cd amplicon/32FAPROTAX

### 1. 软件安装

#下载软件1.1版， June 10, 2017更新数据库
wget -c https://pages.uoregon.edu/slouca/LoucaLab/archive/FAPROTAX/SECTION_Download/MODULE_Downloads/CLASS_Latest%20release/UNIT_FAPROTAX_1.2/FAPROTAX_1.2.zip
#解压
unzip FAPROTAX_1.2.zip

#测试是否可运行，弹出帮助即正常工作
python FAPROTAX_1.2/collapse_table.py

#如果报错，一般提示缺少numpy，可使用conda安装依赖包
conda install numpy
conda install biom

### 2. 制作输入OTU表

#txt转换为biom json格式
biom convert -i otutab_rare.txt -o otutab_rare.biom --table-type="OTU table" --to-json
#添加物种注释
biom add-metadata -i otutab_rare.biom --observation-metadata-fp taxonomy2.txt \
-o otutab_rare_tax.biom --sc-separated taxonomy \
--observation-header OTUID,taxonomy
#指定输入文件、物种注释、输出文件、注释列名、属性列名

### 3. FAPROTAX功能预测

#python运行collapse_table.py脚本、输入带有物种注释OTU表tax.biom、
#-g指定数据库位置，物种注释列名，输出过程信息，强制覆盖结果，结果文件和细节
#下载faprotax.txt，配合实验设计可进行统计分析
#faprotax_report.txt查看每个类别中具体来源哪些OTUs
python FAPROTAX_1.2/collapse_table.py -i otutab_rare_tax.biom \
-g FAPROTAX_1.2/FAPROTAX.txt \
--collapse_by_metadata 'taxonomy' -v --force \
-o faprotax.txt -r faprotax_report.txt

### 4. 制作OTU对应功能注释有无矩阵

# 对OTU注释行，及前一行标题进行筛选
grep 'ASV_' -B 1 faprotax_report.txt | grep -v -P '^--$' > faprotax_report.clean
# 筛选Perl脚本将数据整理为表格，搜索我的github(YongxinLiu)或32FAPROTAX目录
./faprotax_report_sum.pl -i faprotax_report.clean -o faprotax_report
# 查看功能有无矩阵，-S不换行
less -S faprotax_report.mat



# 33、MachineLearning机器学习

## Silme2随机森林/Adaboost

# 使用实战
cd 33MachineLearning/slime2
#使用adaboost计算10000次(16.7s)，推荐千万次
./slime2.py otutab.txt design.txt --normalize --tag ab_e4 ab -n 10000
#使用RandomForest计算10000次(14.5s)，推荐百万次，支持多线程
./slime2.py otutab.txt design.txt --normalize --tag rf_e4 rf -n 10000
cd ../../
  
  #下载安装
  cd ~/software/
  wget https://github.com/swo/slime2/archive/master.zip
mv master.zip slime2.zip
unzip slime2.zip
mv slime2-master/ slime2
cp slime2/slime2.py ~/bin/
  chmod +x ~/bin/slime2.py

#安装依赖包
sudo pip3 install --upgrade pip
sudo pip3 install pandas
sudo pip3 install sklearn



# 34. Evolution进化树

cd ${wd}
mkdir -p result/tree
cd ${wd}/result/tree

## 1. 筛选高丰度、指定ASV序列

#方法1. 按丰度筛选：筛选树高丰度OTU，一般选0.001或0.005，且OTU数量在30-150个范围内
#统计OTU表中OTU数量，如总计2631个
tail -n+2 ../otutab_rare.txt | wc -l
#按相对丰度0.2%筛选高丰度OTU
usearch -otutab_trim ../otutab_rare.txt \
-min_otu_freq 0.002 \
-output otutab.txt
#统计筛选OTU表特征数量，总计79或80个
tail -n+2 otutab.txt | wc -l
#提取ID用于提取序列
cut -f 1 otutab.txt | sed '1 s/#OTU ID/OTUID/' > otutab_high.id

#方法2. 按数量筛选
#按丰度排序，默认由大到小
usearch -otutab_sortotus ../otutab_rare.txt  \
-output otutab_sort.txt
#提取高丰度中指定Top数量的OTU ID，如Top100,
sed '1 s/#OTU ID/OTUID/' otutab_sort.txt \
| head -n101 > otutab.txt
cut -f 1 otutab.txt > otutab_high.id

#筛选高丰度菌/指定差异菌对应OTU序列
usearch -fastx_getseqs ../otus.fa -labels otutab_high.id \
-fastaout otus.fa

head -n 2 otus.fa

## 筛选OTU对物种注释
awk 'NR==FNR{a[$1]=$0} NR>FNR{print a[$1]}' ../taxonomy.txt \
otutab_high.id > otutab_high.tax

#获得OTU对应组均值，用于样本热图
#依赖之前otu_mean.R计算过按Group分组的均值
awk 'NR==FNR{a[$1]=$0} NR>FNR{print a[$1]}' ../otutab_mean.txt otutab_high.id \
| sed 's/#OTU ID/OTUID/' > otutab_high.mean
head -n3 otutab_high.mean

#合并物种注释和丰度为注释文件
cut -f 2- otutab_high.mean > temp
paste otutab_high.tax temp > annotation.txt
head -n 3 annotation.txt


## 2. 构建进化树

# 起始文件为 result/tree目录中 otus.fa(序列)、annotation.txt(物种和相对丰度)文件
# Muscle软件进行序列对齐，3s
time muscle -in otus.fa -out otus_aligned.fas

### 方法1. 利用IQ-TREE快速构建ML进化树，2m
mkdir -p iqtree
time iqtree -s otus_aligned.fas \
-bb 1000 -redo -alrt 1000 -nt AUTO \
-pre iqtree/otus

### 方法2. FastTree快速建树(Linux)
# 注意FastTree软件输入文件为fasta格式的文件，而不是通常用的Phylip格式。输出文件是Newick格式。
# 该方法适合于大数据，例如几百个OTUs的系统发育树！
# Ubuntu上安装fasttree可以使用`apt install fasttree`
# fasttree -gtr -nt otus_aligned.fa > otus.nwk


## 3. 进化树美化

# 访问http://itol.embl.de/，上传otus.nwk，再拖拽下方生成的注释方案于树上即美化

## 方案1. 外圈颜色、形状分类和丰度方案
# annotation.txt OTU对应物种注释和丰度，
# -a 找不到输入列将终止运行（默认不执行）-c 将整数列转换为factor或具有小数点的数字，-t 偏离提示标签时转换ID列，-w 颜色带，区域宽度等， -D输出目录，-i OTU列名，-l OTU显示名称如种/属/科名，
# cd ${wd}/result/tree
Rscript ${bin}/script/table2itol.R -a -c double -D plan1 -i OTUID -l Genus -t %s -w 0.5 annotation.txt
# 生成注释文件中每列为单独一个文件

## 方案2. 生成丰度柱形图注释文件
Rscript ${bin}/script/table2itol.R -a -d -c none -D plan2 -b Phylum -i OTUID -l Genus -t %s -w 0.5 annotation.txt

## 方案3. 生成热图注释文件
Rscript ${bin}/script/table2itol.R -c keep -D plan3 -i OTUID -t %s otutab.txt

## 方案4. 将整数转化成因子生成注释文件
Rscript ${bin}/script/table2itol.R -a -c factor -D plan4 -i OTUID -l Genus -t %s -w 0 annotation.txt

# 返回工作目录
cd ${wd}



# 常见问题

## 1. 文件phred质量错误——Fastq质量值64转33

#查看64位格式文件，质量值多为小写字母
head -n4 FAQ/Q64Q33/test_64.fq
#转换质量值64编码格式为33
vsearch --fastq_convert FAQ/Q64Q33/test_64.fq \
--fastqout FAQ/test.fq \
--fastq_ascii 64 --fastq_asciiout 33
#查看转换后33编码格式，质量值多为大写字母
head -n4 FAQ/test.fq

## 2. 序列双端已经合并——单端序列重命名/添加样本名

#查看文件序列名
head -n1 FAQ/test.fq
#序列按样本命名，并输出到新文件夹
mkdir -p FAQ/relabel
vsearch --fastq_convert FAQ/test.fq \
--fastqout FAQ/relabel/WT1.fq --relabel WT1.
#查看转换后33编码格式，质量值多为大写字母
head -n1 FAQ/relabel/WT1.fq

## 3. 数据过大无法使用usearch聚类或去噪-vsearch

#备选vsearch生成OTU，但无自动de novo去嵌合功能
#仅限usearch免费版受限时(可通过提高minuniquesize参数减少数据量)使用，不推荐
#重命名、相似97%，不屏蔽，输入和输出count
vsearch --cluster_size temp/uniques.fa  \
--centroids temp/otus.fa \
--relabel OTU_ --id 0.97 --qmask none --sizein --sizeout
#5s Clusters: 1062
#vsearch还需连用--uchime3_denovo


## 4. Reads count整数值如何标准化为相对丰度

#求取各个OTU在对应样品的丰度频率
usearch -otutab_counts2freqs result/otutab_rare.txt \
-output result/otutab_rare_freq.txt

## 5. 运行R提示write.table Permission denied

#例如报错信息示例如下：
Error in file(file, ifelse(append, "a", "w")) :
  Calls: write.table -> file
: Warning message:
  In file(file, ifelse(append, "a", "w")) :
  'result/raw/otutab_nonBac.txt': Permission denied
#翻译为写入文件无权限，一般为目标文件正在被打开，请关闭重试

## 6. 文件批量命名

# 注意修改路径
cd /c/project/seq
ls > ../filelist.txt
# 编辑列表，第二名为最终命名，确定名称唯一
# 检查手动命名是否唯一
cut -f 2 ../filelist.txt |wc -l
cut -f 2 ../filelist.txt | sort | uniq |wc -l
# 如果两次结果一致，则命名非冗余
awk '{system("mv "$1" "$2)}' ../filelist.txt

## 7. Rstudio中Terminal找不到Linux命令

# 需要把 C:\Program Files\Git\usr\bin 目录添加到系统环境变量
# 注意win10系统是一个目录一行；win7中多个目录用分号分隔，注意向后添加目录


## 8. 测试均值丢失组
cd /c/amplicon/FAQ/merge
#按组求均值，需根据实验设计metadata.txt修改组列名
#输入文件为feautre表result/otutab.txt，实验设计metadata.txt
#输出为特征表按组的均值-一个实验可能有多种分组方式
Rscript /c/amplicon/22Pipeline/script/otu_mean.R

#如以平均丰度频率高于0.05%为筛选标准，得到每个组的OTU组合
awk 'BEGIN{OFS=FS="\t"}{if(FNR==1) {for(i=2;i<=NF;i++) a[i]=$i;} \
        else {for(i=2;i<=NF;i++) if($i>0.05) print $1, a[i];}}' \
result/otutab_mean_Genotype.txt > alpha/otu_group_exist.txt
# 结果可以直接在http://www.ehbio.com/ImageGP绘制Venn、upSetView和Sanky

## 9. usearch/vsearch 生成OTU表时无法匹配
#是原始序列方向错误，将序列需要取反向互补
vsearch --fastx_revcomp ../FAQ/filtered_test.fa \
--fastaout ../FAQ/filtered_test_RC.fa
# 再分析
usearch -otutab ../FAQ/filtered_test_RC.fa -otus db/gg/97_otus.fasta \
-otutabout gg/otutab.txt -threads 6

## 10. 检查文件windows换行符和删除

cd /c/amplicon/FAQ/190614_ITS_taxSum_0field
i=g
usearch -sintax_summary sintax.txt \
-otutabin otutab_rare.txt \
-rank ${i} \
-output sum_${i}.txt
