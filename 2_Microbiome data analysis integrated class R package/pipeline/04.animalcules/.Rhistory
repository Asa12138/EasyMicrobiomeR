knitr::opts_chunk$set(echo = TRUE,
fig.width = 7,
fig.height = 5,
fig.align = "center",
warning = FALSE,
message = FALSE
)
library(animalcules)
library(SummarizedExperiment)
library(MultiAssayExperiment)
#--得到phyloserq对象并提取必要数据信息
library(ggClusterNet)
library(phyloseq)
data(ps)
otu = as.data.frame(t(vegan_otu(ps)))
head(otu)
tax = as.data.frame((vegan_tax(ps)))
head(tax)
map = sample_data(ps)
head(map)
#--首先构造SummarizedExperiment对象，比较简单，类似phyloseq对象
micro <- SummarizedExperiment(assays=list(counts=as.matrix(otu)),
colData=map,
rowData=tax)
# 将SummarizedExperiment对象封装成为ExperimentList
mlist <- ExperimentList()
mlist[[1]] = micro
names(mlist) = "MicrobeGenetics"# 注意必须命名，否则无法区分每个部分数据组
# 构造不同数据组之间的记录文件
gistmap <- data.frame(
primary = row.names(map),
colname = row.names(map),
stringsAsFactors = FALSE)
maplistowe <- list(MicrobeGenetics = gistmap)
sampMapowe <- listToMap(maplistowe)
# colData文件为分组文件，数据框即可，本案例只有一个微生物组数据，所以直接用map文件就可以了。
#-下面就直接构建了MultiAssayExperiment文件
mae <- MultiAssayExperiment(experiments = mlist, colData = map,
sampleMap = sampMapowe)
run_animalcules()
p <- filter_summary_pie_box(mae,
samples_discard = c("subject_2", "subject_4"),
filter_type = "By Metadata",
sample_condition = "Group")
p
ps <- subset_samples(ps,!Group %in% c("OE"));ps
otu = as.data.frame(t(vegan_otu(ps)))
head(otu)
tax = as.data.frame((vegan_tax(ps)))
head(tax)
map = sample_data(ps)
head(map)
#--首先构造SummarizedExperiment对象，比较简单，类似phyloseq对象
micro <- SummarizedExperiment(assays=list(counts=as.matrix(otu)),
colData=map,
rowData=tax)
mlist <- ExperimentList()
mlist[[1]] = micro
names(mlist) = "MicrobeGenetics"# 注意必须命名，否则无法区分每个部分数据组
# 构造不同数据组之间的记录文件
gistmap <- data.frame(
primary = row.names(map),
colname = row.names(map),
stringsAsFactors = FALSE)
maplistowe <- list(MicrobeGenetics = gistmap)
sampMapowe <- listToMap(maplistowe)
# colData文件为分组文件，数据框即可，本案例只有一个微生物组数据，所以直接用map文件就可以了。
#-下面就直接构建了MultiAssayExperiment文件
mae <- MultiAssayExperiment(experiments = mlist, colData = map,
sampleMap = sampMapowe)
p <- find_biomarker(mae,
tax_level = "Genus",
input_select_target_biomarker = c("Group"),
nfolds = 3,
nrepeats = 6,
seed = 99,
percent_top_biomarker = 0.2,
model_name = "logistic regression")
p <- find_biomarker(mae,
tax_level = "Genus",
input_select_target_biomarker = c("Group"),
nfolds = 3,
nrepeats = 6,
seed = 99,
percent_top_biomarker = 0.2,
model_name = "logistic regression")
#-提取生物标记物
p$biomarker
#-提取生物标记物
p$biomarker
#对重要变量可视化。
# importance plot
p$importance_plot
#-提取生物标记物
p$biomarker
#对重要变量可视化。
# importance plot
p$importance_plot
#ROC曲线准确度评估。注意ROC曲线只能对二分便量进行操作。
# ROC plot
p$roc_plot
