ax2 <- names(proj)[[2]]
p <- ggplot(aes_string(x = ax1, y = ax2, label = "Group"), data = proj) +
geom_text(size = 2)
print(p)
library(reshape2)
# Pick data subset (DI samples from Phylum Bacteroidetes)
pseq2 <- ps %>%
subset_taxa(Phylum == "Bacteroidetes")
# Z transformed abundance data
pseqz <- microbiome::transform(pseq2, "Z")
# Plot the abundances heatmap
dfm <- melt(abundances(pseqz))
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
# Sort the matrix rows and cols directly
xo <- neat(abundances(pseqz), method = "NMDS", distance = "euclidean")
# Heatmap visualization
dfm <- melt(xo)
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
sorted.rows <- neatsort(abundances(pseqz), "rows", method = "NMDS", distance = "euclidean")
p <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10()
print(p)
library(tidyr)
# Analyse specific taxa
tax <- "ASV_1"
# Pick the signal (abundance) for this tax
sample_data(ps)$signal <- get_sample(ps, tax)
attach(meta(ps))
res<- pairwise.wilcox.test(signal, Group, p.adjust.method = 'BH')
resK<- kruskal.test(signal, Group)
print(resK)
tab <- alpha(ps, index = "all")
tab %>% dim()
summarize_phyloseq(ps)
tab <- alpha(ps, index = "all")
tab %>% dim()
tab %>% dim()
#-单独计算richness
tab <- richness(ps)
kable(head(tab))
library(knitr)
#-单独计算richness
tab <- richness(ps)
kable(head(tab))
#-单独计算支配物种指数
tab <- dominance(ps, index = "all")
kable(head(tab))
#-计算稀有微生物指数
tab <- rarity(ps, index = "all")
kable(head(tab))
#-计算覆盖度指标
tab <- coverage(ps, threshold = 0.5)
kable(head(tab))
#-计算核心微生物指数
tab <- core_abundance(ps, detection = .1/100, prevalence = 50/100)
kable(head(tab))
#-计算基尼系数
tab <- inequality(ps)
kable(head(tab))
#-计算均匀度指数
tab <- evenness(ps, "all")
kable(head(tab))
#--计算alpha多样性指数差异显著性
d <- meta(ps)
d
#--计算alpha多样性指数差异显著性
d <- meta(ps)
d$diversity <- diversities(ps, "shannon")$diversity_shannon
split(d$diversity, d$sex)
split(d$diversity, d$Group)
# 按照分组分开指数
spl <- split(d$diversity, d$Group)
# Kolmogorov-Smironv test
pv <- ks.test(spl$female, spl$male)$p.value
pv
# Kolmogorov-Smironv test
pv <- ks.test(spl$KO, spl$OE)$p.value
# Adjust the p-value
padj <- p.adjust(pv)
padj
# 转化相对丰度
pseq <- pseq.rel <- microbiome::transform(ps, "compositional")
pseq
pseq.core
？ordinate
?ordinate
ord <- ordinate(pseq, "CAP", "bray")
ord <- ordinate(pseq, "CAP", "bray")
# 转化相对丰度
pseq <- pseq.rel <- microbiome::transform(ps, "compositional")
# 选择核心微生物类群
pseq.core <- core(pseq, detection = .1/100, prevalence = 90/100)
ord <- ordinate(pseq, "CAP", "bray")
?ordinate
ord <- Microbiome::ordinate(pseq, "MDS", "bray")
# proj <- get_ordination(pseq, "MDS", "bray")
?get_ordination
View(pseq2)
# Convert to compositional data
pseq <- microbiome::transform(ps, "compositional")
# Pick core taxa
pseq.core <- core(pseq, detection = 1/1000, prevalence = 5/100)
?plot_landscape
p <- plot_landscape(pseq, method = "t-SNE", transformation = "clr", col = "Group") +
labs(title = paste("PCA / CLR"))
p <- plot_landscape(pseq, method = "PCA", transformation = "clr", col = "Group") +
labs(title = paste("PCA / CLR"))
# Convert to compositional data
pseq <- microbiome::transform(ps, "compositional")
# Pick core taxa
pseq.core <- core(pseq, detection = 1/1000, prevalence = 5/100)
p <- plot_landscape(pseq, method = "PCA",  col = "Group") +
labs(title = paste("PCA / CLR"))
print(p)
p <- plot_landscape(microbiome::transform(pseq.core, "compositional"),
method = "PCoA", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
print(p)
print(p)
plot_landscape(ps,
method = "PCoA", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
plot_landscape(pseq,
method = "PCoA", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
plot_landscape(pseq, method = "PCA",  col = "Group") +
labs(title = paste("PCA / CLR"))
plot_landscape(pseq,
method = "t-SNE", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
plot_landscape(pseq,
method = "MDS", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
plot_landscape(pseq,
method = "NMDS", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
#--PCOA可用
plot_landscape(pseq,
method = "PCoA", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
#--PCOA可用
plot_landscape(pseq,
method = "CAP", distance = "bray", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
p <- plot_landscape(microbiome::transform(pseq.core, "compositional"),
method = "PCoA", distance = "unifrac", col = "Group") +
labs(title = paste("PCoA / Compositional / Bray-Curtis"))
print(p)
plot_landscape(pseq, "t-SNE",
distance = "euclidean", transformation = "hellinger") +
labs(title = paste("t-SNE / Hellinger / Euclidean"))
plot_landscape(pseq.core, "t-SNE",
distance = "euclidean", transformation = "hellinger") +
labs(title = paste("t-SNE / Hellinger / Euclidean"))
set.seed(423542)
x <- pseq.core
quiet(x.ord <- ordinate(x, "NMDS", "bray"))
quiet
# Pick the projected data (first two columns + metadata)
proj <- phyloseq::plot_ordination(x, x.ord, justDF=TRUE)
# Rename the projection axes
names(proj)[1:2] <- paste("Comp", 1:2, sep=".")
# Same with a generic data.frame
# (note that random seed will affect the exact ordination)
p <- plot_landscape(proj[, 1:2], col = proj$nationality, legend = T)
print(p)
# Visualize sample names:
ax1 <- names(proj)[[1]]
ax2 <- names(proj)[[2]]
p <- ggplot(aes_string(x = ax1, y = ax2, label = "Group"), data = proj) +
geom_text(size = 2)
print(p)
# Pick the projected data (first two columns + metadata)
proj <- phyloseq::plot_ordination(x, x.ord, justDF=TRUE)
proj
p <- pplot_landscape(pseq,
method = "NMDS", distance = "bray", col = "Group") +
labs(title = paste("NMDS / Compositional / Bray-Curtis"))
p <- plot_landscape(pseq,
method = "NMDS", distance = "bray", col = "Group") +
labs(title = paste("NMDS / Compositional / Bray-Curtis"))
print(p)
names(proj)[[1]]
names(proj)
ax1
# Same with a generic data.frame
# (note that random seed will affect the exact ordination)
p <- plot_landscape(proj[, 1:2], col = proj$nationality, legend = T)
print(p)
p <- ggplot(aes_string(x = ax1, y = ax2, label = "Group"), data = proj) +
geom_text(size = 2)
print(p)
quiet(x.ord <- ordinate(x, "NMDS", "bray"))
# Pick the projected data (first two columns + metadata)
proj <- phyloseq::plot_ordination(x, x.ord, justDF=TRUE)
# Rename the projection axes
names(proj)[1:2] <- paste("Comp", 1:2, sep=".")
# Same with a generic data.frame
# (note that random seed will affect the exact ordination)
p <- plot_landscape(proj[, 1:2], col = proj$nationality, legend = T)
print(p)
p <- ggplot(aes_string(x = ax1, y = ax2, label = "Group"), data = proj) +
geom_text(size = 2)
print(p)
ps1 <- ps %>%
# subset_samples(Group == "OE") %>%
tax_glom_wt(ranks = "Phylum") %>%
microbiome::transform(transform = "compositional")
ps1
ps1 <- ps %>%
# subset_samples(Group == "OE") %>%
tax_glom_wt(ranks = "Phylum") %>%
microbiome::transform(transform = "compositional")
p <- ps1 %>%
plot_composition(sample.sort = "Bacteroidetes", otu.sort = "abundance")
print(p)
ps_rela =  microbiome::transform(ps, "compositional")
pseq <- ps_rela %>%
core(detection = 0.01, prevalence = 50/100)
pseq =  microbiome::transform(ps, "compositional") %>%
core(detection = 0.01, prevalence = 50/100)
# With compositional (relative) abundances
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
plot_core(pseq,prevalences = prevalences, detections = det, plot.type = "lineplot") + xlab("Relative Abundance (%)")
prevalences
det
p <- pseq %>%
plot_composition(sample.sort = "Firmicutes", otu.sort = "abundance")
print(p)
library(RColorBrewer)
# library(reshape)
# BiocManager::install("reshape")
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Also define gray color palette
gray <- gray(seq(0,1,length=5))
#pseq.rel<- microbiome::transform(pseq, 'compositional')
p <- plot_core(pseq, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections) +
labs(x = "Detection Threshold (Relative Abundance (%))")
p
gray
#pseq.rel<- microbiome::transform(pseq, 'compositional')
p <- plot_core(pseq, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections) +
labs(x = "Detection Threshold (Relative Abundance (%))")
p
detections <- 10^seq(log10(1), log10(max(abundances(pseq))/10), length = 10)
p <- plot_core(pseq, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .2, horizontal = TRUE)
print(p)
library(reshape2)
# Pick data subset (DI samples from Phylum Bacteroidetes)
pseq2 <- ps %>%
subset_taxa(Phylum == "Bacteroidetes")
# Z transformed abundance data
pseqz <- microbiome::transform(pseq2, "Z")
# Plot the abundances heatmap
dfm <- melt(abundances(pseqz))
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
# Sort the matrix rows and cols directly
xo <- neat(abundances(pseqz), method = "NMDS", distance = "euclidean")
# Heatmap visualization
dfm <- melt(xo)
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
neat(abundances(pseqz), method = "NMDS", distance = "euclidean")
# Z transformed abundance data
pseqz <- microbiome::transform(pseq2, "Z")
# Plot the abundances heatmap
dfm <- melt(abundances(pseqz))
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
p <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10()
print(p)
library(tidyr)
# Analyse specific taxa
tax <- "ASV_1"
# Pick the signal (abundance) for this tax
sample_data(ps)$signal <- get_sample(ps, tax)
attach(meta(ps))
res<- pairwise.wilcox.test(signal, Group, p.adjust.method = 'BH')
resK<- kruskal.test(signal, Group)
print(resK)
library(microbiome)
library(phyloseq)
library(gcookbook)
library(tidyverse)
library(knitr)
library(ggClusterNet)
data(ps)
theme_set(theme_bw(21))
# Convert to compositional data
pseq <- microbiome::transform(ps, "compositional")
# Pick core taxa
pseq.core <- core(pseq, detection = 1/1000, prevalence = 5/100)
#-使用需要进化树计算的距离
p1 <- plot_landscape(microbiome::transform(pseq.core, "compositional"),
method = "PCoA", distance = "unifrac", col = "Group") +
labs(title = paste("PCoA / Compositional / unifrac")) +
theme_bw()
print(p1)
ggsave("./Fig1_PCoA.pdf",p1,width = 8,height = 6)
#-使用需要进化树计算的距离
?plot_landscape
ggsave("./Fig1_PCoA.pdf",p1,width = 7,height = 5)
set.seed(423542)
x <- pseq.core
quiet(x.ord <- ordinate(x, "NMDS", "bray"))
# Pick the projected data (first two columns + metadata)
proj <- phyloseq::plot_ordination(x, x.ord, justDF=TRUE)
# Rename the projection axes
names(proj)[1:2] <- paste("Comp", 1:2, sep=".")
# 使用Microbioem包出图
p <- plot_landscape(proj[, 1:2], col = proj$nationality, legend = T)
print(p)
#-提取数据自己出图
p <- ggplot(aes_string(x = ax1, y = ax2, label = "Group"), data = proj) +
geom_text(size = 2)
print(p)
set.seed(423542)
x <- pseq.core
quiet(x.ord <- ordinate(x, "NMDS", "bray"))
# Pick the projected data (first two columns + metadata)
proj <- phyloseq::plot_ordination(x, x.ord, justDF=TRUE)
# Rename the projection axes
names(proj)[1:2] <- paste("Comp", 1:2, sep=".")
# 使用Microbioem包出图
p <- plot_landscape(proj[, 1:2], col = proj$nationality, legend = T)
print(p)
#-提取数据自己出图
p <- ggplot(aes_string(x = ax1, y = ax2, label = "Group"), data = proj) +
geom_text(size = 2)
head(proj)
#-提取数据自己出图
p <- ggplot(aes_string(x = Comp.1, y = Comp.2, label = "Group"), data = proj) +
geom_text(size = 2)
head(proj)
#-提取数据自己出图
p <- ggplot(aes_string(x = proj$Comp.1, y = proj$Comp.2, label = "Group"), data = proj) +
geom_text(size = 2)
print(p)
ps1 <- ps %>%
# subset_samples(Group == "OE") %>%
tax_glom_wt(ranks = "Phylum") %>%
microbiome::transform(transform = "compositional")
p <- ps1 %>%
plot_composition(sample.sort = "Bacteroidetes", otu.sort = "abundance")
print(p)
ggsave("./Fig2_abundance_bar.pdf",p2,width = 8,height = 5)
p2 <- ps1 %>%
plot_composition(sample.sort = "Bacteroidetes", otu.sort = "abundance")
print(p2)
ggsave("./Fig2_abundance_bar.pdf",p2,width = 8,height = 5)
ggsave("./Fig2_abundance_bar.pdf",p2,width = 10,height = 8)
pseq =  microbiome::transform(ps, "compositional") %>%
core(detection = 0.01, prevalence = 50/100)
# With compositional (relative) abundances
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
p <- pseq %>%
plot_composition(sample.sort = "Firmicutes", otu.sort = "abundance")
print(p)
library(RColorBrewer)
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
# Also define gray color palette
gray <- gray(seq(0,1,length=5))
#pseq.rel<- microbiome::transform(pseq, 'compositional')
p <- plot_core(pseq, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections) +
labs(x = "Detection Threshold (Relative Abundance (%))")
p
detections <- 10^seq(log10(1), log10(max(abundances(pseq))/10), length = 10)
p <- plot_core(pseq, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .2, horizontal = TRUE)
print(p)
library(eulerr)
library(microbiome)
pseq.rel <- microbiome::transform(ps, "compositional")
disease_states <- unique(as.character(meta(pseq.rel)$Group))
print(disease_states)
list_core <- c() # an empty object to store information
for (n in disease_states){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, Group == n) # Choose sample from DiseaseState by n
core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.75)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
mycols <- c(nonCRC="#d6e2e9", CRC="#cbf3f0", H="#fcf5c7")
plot(venn(list_core),
fills = mycols)
pdf("./Fig2_ven.pdf")
plot(venn(list_core),
fills = mycols)
dev.off()
dev.off()
pdf("./Fig2_ven.pdf")
plot(venn(list_core),
fills = mycols)
dev.off()
library(reshape2)
# Pick data subset (DI samples from Phylum Bacteroidetes)
pseq2 <- ps %>%
subset_taxa(Phylum == "Bacteroidetes")
# Z transformed abundance data
pseqz <- microbiome::transform(pseq2, "Z")
# Plot the abundances heatmap
dfm <- melt(abundances(pseqz))
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
# Sort the matrix rows and cols directly
xo <- neat(abundances(pseqz), method = "NMDS", distance = "euclidean")
# Heatmap visualization
dfm <- melt(xo)
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
pdf("./Fig3_ven.pdf")
plot(venn(list_core),
fills = mycols)
dev.off()
pdf("./Fig4_heatmap.pdf")
pdf("./Fig4_heatmap.pdf",width = 10,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
dev.off()
pdf("./Fig4_heatmap.pdf",width = 10,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
dev.off()
dev.off()
pdf("./Fig4_heatmap.pdf",width = 10,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
pdf("./Fig4_heatmap.pdf",width = 18,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
pseq2
ps
# Pick data subset (DI samples from Phylum Bacteroidetes)
tax_table(ps)[,1:6]
pseq2 <- ps %>%
subset_taxa(Genus == "Actinocorallia")
pseq2
# Pick data subset (DI samples from Phylum Bacteroidetes)
# tax_table(ps)[,1:6]
pseq2 <- ps %>%
subset_taxa(Genus == "Ramlibacter")
pseq2
# Z transformed abundance data
pseqz <- microbiome::transform(pseq2, "Z")
# Plot the abundances heatmap
dfm <- melt(abundances(pseqz))
colnames(dfm) <- c("Taxa", "Sample", "value")
pdf("./Fig4_heatmap.pdf",width = 6,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
pdf("./Fig4_heatmap.pdf",width = 8,height = 6)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
pdf("./Fig4_heatmap.pdf",width = 10,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
pdf("./Fig4_heatmap.pdf",width = 10,height = 8)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
pdf("./Fig4_heatmap.pdf",width = 15,height = 12)
heat(dfm, "Taxa", "Sample", "value")
dev.off()
# Sort the matrix rows and cols directly
xo <- neat(abundances(pseqz), method = "NMDS", distance = "euclidean")
# Heatmap visualization
dfm <- melt(xo)
colnames(dfm) <- c("Taxa", "Sample", "value")
heat(dfm, "Taxa", "Sample", "value")
sorted.rows <- neatsort(abundances(pseqz), "rows", method = "NMDS", distance = "euclidean")
p <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10()
print(p)
library(tidyr)
# Analyse specific taxa
tax <- "ASV_1"
# Pick the signal (abundance) for this tax
sample_data(ps)$signal <- get_sample(ps, tax)
attach(meta(ps))
res<- pairwise.wilcox.test(signal, Group, p.adjust.method = 'BH')
resK<- kruskal.test(signal, Group)
print(resK)
p4 <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10()
print(p4)
p4 <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10() + theme_bw()
print(p4)
ggsave(p4,"./Fig5_special_microbe.pdf",width = 4,height = 4)
p4 <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10() + theme_bw()
print(p4)
p4 <- boxplot_abundance(ps, x = "Group", y = "ASV_1") + scale_y_log10()
print(p4)
ggsave(p4,"./Fig5_special_microbe.pdf",width = 4,height = 4)
ggsave("./Fig5_special_microbe.pdf",p4,width = 4,height = 4)
